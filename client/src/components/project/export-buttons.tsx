import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Mail, Download, Send, User, AtSign, Calendar } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';

interface ExportButtonsProps {
  projectId: number;
  projectTitle: string;
  workflowSteps: any[]; // Replace with the proper WorkflowStep type
  collaborators: any[]; // Replace with the proper Collaborator type
}

export function ExportButtons({ projectId, projectTitle, workflowSteps, collaborators }: ExportButtonsProps) {
  const { toast } = useToast();
  const [emailDialogOpen, setEmailDialogOpen] = useState(false);
  const [recipientEmail, setRecipientEmail] = useState('');
  const [selectedCollaborator, setSelectedCollaborator] = useState<number | null>(null);
  const [emailSubject, setEmailSubject] = useState(`Project Schedule: ${projectTitle}`);
  const [emailMessage, setEmailMessage] = useState('');
  const [isSending, setIsSending] = useState(false);
  
  // Function to open email dialog and reset state
  const openEmailDialog = () => {
    setRecipientEmail('');
    setSelectedCollaborator(null);
    setEmailSubject(`Project Schedule: ${projectTitle}`);
    setEmailMessage('');
    setEmailDialogOpen(true);
  };

  // Function to download project schedule as PDF
  const downloadPdf = () => {
    try {
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(18);
      doc.text(`Project Schedule: ${projectTitle}`, 14, 20);
      
      // Add date
      doc.setFontSize(12);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);
      
      // Set up workflow steps table
      const workflowHeaders = [['Step', 'Status', 'Assigned To', 'Due Date']];
      const workflowData = workflowSteps.map(step => [
        step.title,
        step.status,
        getAssigneeName(step.assignedTo),
        step.dueDate ? new Date(step.dueDate).toLocaleDateString() : 'Not set'
      ]);
      
      // Draw workflow steps table
      doc.setFontSize(14);
      doc.text('Workflow Steps', 14, 45);
      (doc as any).autoTable({
        startY: 50,
        head: workflowHeaders,
        body: workflowData,
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] }
      });
      
      // Set up talent assignments table
      const talentHeaders = [['Name', 'Role', 'Assigned Steps', 'Status']];
      const talentData = collaborators.map(collaborator => [
        collaborator.name || 'Not specified',
        collaborator.role,
        getAssignedStepsForTalent(collaborator.userId),
        collaborator.availability || 'Not specified'
      ]);
      
      // Draw talent assignments table
      doc.setFontSize(14);
      doc.text('Talent Assignments', 14, (doc as any).lastAutoTable.finalY + 20);
      (doc as any).autoTable({
        startY: (doc as any).lastAutoTable.finalY + 25,
        head: talentHeaders,
        body: talentData,
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] }
      });
      
      // Add footer
      const pageCount = (doc as any).internal.getNumberOfPages();
      for(let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text('Generated by Comic Book Editor', doc.internal.pageSize.width / 2, 285, { align: 'center' });
      }
      
      // Save the PDF
      doc.save(`${projectTitle.replace(/\s+/g, '_')}_Schedule.pdf`);
      
      toast({
        title: "PDF Downloaded",
        description: "The project schedule PDF has been downloaded.",
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        title: "PDF Generation Failed",
        description: "There was an error generating the PDF.",
        variant: "destructive"
      });
    }
  };
  
  // Function to send project schedule via email using mailto link
  const sendEmail = () => {
    // Get the final recipient email - either direct input or from selected collaborator
    let finalRecipientEmail = recipientEmail;
    
    // If a collaborator is selected, use their email instead of manual input
    if (selectedCollaborator !== null) {
      const selectedUser = collaborators.find(c => c.userId === selectedCollaborator);
      if (selectedUser && selectedUser.email) {
        finalRecipientEmail = selectedUser.email;
      }
    }
    
    // Validate we have an email address
    if (!finalRecipientEmail) {
      toast({
        title: "Missing Email",
        description: "Please enter a recipient email address or select a collaborator.",
        variant: "destructive"
      });
      return;
    }
    
    try {
      // Generate plain text version of the schedule
      const textContent = generatePlainTextSchedule();
      
      // Create the mailto link with the schedule content
      const mailtoLink = `mailto:${finalRecipientEmail}?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailMessage + '\n\n' + textContent)}`;
      
      // Open the user's default email client
      window.open(mailtoLink, '_blank');
      
      toast({
        title: "Email Client Opened",
        description: `Your default email client has been opened to send to ${finalRecipientEmail}.`,
      });
      setEmailDialogOpen(false);
    } catch (error) {
      console.error('Email link error:', error);
      toast({
        title: "Email Link Failed",
        description: "There was an error creating the email link. Please try again.",
        variant: "destructive"
      });
    }
  };
  
  // Generate a plain text version of the schedule for email
  const generatePlainTextSchedule = () => {
    let text = `PROJECT SCHEDULE: ${projectTitle}\n`;
    text += `Generated on: ${new Date().toLocaleDateString()}\n\n`;
    
    text += "WORKFLOW STEPS:\n";
    text += "----------------\n";
    workflowSteps.forEach(step => {
      text += `${step.title} - ${step.status} - Assigned to: ${getAssigneeName(step.assignedTo)}\n`;
      if (step.dueDate) {
        text += `Due: ${new Date(step.dueDate).toLocaleDateString()}\n`;
      }
      text += "\n";
    });
    
    text += "\nTALENT ASSIGNMENTS:\n";
    text += "-------------------\n";
    collaborators.forEach(collaborator => {
      text += `${collaborator.name || 'Not specified'} - Role: ${collaborator.role}\n`;
      text += `Assigned Steps: ${getAssignedStepsForTalent(collaborator.userId)}\n`;
      if (collaborator.availability) {
        text += `Status: ${collaborator.availability}\n`;
      }
      text += "\n";
    });
    
    text += "\nThis schedule was generated by Comic Book Editor";
    
    return text;
  };
  
  // Helper function to get assignee name by ID
  const getAssigneeName = (assigneeId: number | undefined) => {
    if (!assigneeId) return 'Unassigned';
    const collaborator = collaborators.find(c => c.userId === assigneeId);
    return collaborator ? (collaborator.name || collaborator.fullName || 'Unknown') : 'Unknown';
  };
  
  // Helper function to get steps assigned to a talent
  const getAssignedStepsForTalent = (userId: number) => {
    const assignedSteps = workflowSteps.filter(step => step.assignedTo === userId);
    return assignedSteps.map(step => step.title).join(', ') || 'None';
  };
  
  // Generate HTML email content
  const generateEmailHtml = () => {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <h1 style="color: #333;">Project Schedule: ${projectTitle}</h1>
        <p>Generated on: ${new Date().toLocaleDateString()}</p>
        
        ${emailMessage ? `<div style="margin: 20px 0; padding: 15px; border-left: 4px solid #ccc;">${emailMessage}</div>` : ''}
        
        <h2 style="color: #444; margin-top: 30px;">Workflow Steps</h2>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #f2f2f2;">
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Step</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Status</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Assigned To</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Due Date</th>
            </tr>
          </thead>
          <tbody>
            ${workflowSteps.map(step => `
              <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">${step.title}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${step.status}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${getAssigneeName(step.assignedTo)}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${step.dueDate ? new Date(step.dueDate).toLocaleDateString() : 'Not set'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <h2 style="color: #444; margin-top: 30px;">Talent Assignments</h2>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #f2f2f2;">
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Name</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Role</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Assigned Steps</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Status</th>
            </tr>
          </thead>
          <tbody>
            ${collaborators.map(collaborator => `
              <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">${collaborator.name || 'Not specified'}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${collaborator.role}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${getAssignedStepsForTalent(collaborator.userId)}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${collaborator.availability || 'Not specified'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <p style="margin-top: 30px; color: #777; font-size: 12px;">
          This schedule was generated by Comic Book Editor.
        </p>
      </div>
    `;
  };

  // Function to generate iCalendar file for workflow steps
  const downloadCalendar = () => {
    try {
      // Start building the iCalendar content
      let icsContent = [
        'BEGIN:VCALENDAR',
        'VERSION:2.0',
        'PRODID:-//Comic Book Editor//Project Calendar//EN',
        'CALSCALE:GREGORIAN',
        'METHOD:PUBLISH',
        `X-WR-CALNAME:${projectTitle} Schedule`,
        'X-WR-TIMEZONE:UTC',
      ];
      
      // Current time for the DTSTAMP field
      const now = new Date();
      const stampString = formatDateForICS(now);
      
      // Generate unique ID for this calendar
      const calendarUid = `project-${projectId}-${Math.floor(Date.now() / 1000)}`;
      
      // Add each workflow step with a due date as an event
      workflowSteps.forEach((step, index) => {
        if (step.dueDate) {
          const dueDate = new Date(step.dueDate);
          const dueDateString = formatDateForICS(dueDate);
          
          // Create a unique ID for this event
          const eventUid = `${calendarUid}-step-${index}`;
          
          // Add event to calendar
          icsContent = icsContent.concat([
            'BEGIN:VEVENT',
            `UID:${eventUid}@comiceditor.app`,
            `DTSTAMP:${stampString}`,
            `DTSTART:${dueDateString}`,
            `DTEND:${dueDateString}`,
            `SUMMARY:${projectTitle} - ${step.title} Due`,
            `DESCRIPTION:Status: ${step.status}\\nAssigned to: ${getAssigneeName(step.assignedTo)}`,
            'END:VEVENT'
          ]);
        }
      });
      
      // Add the project final due date as an event if it exists
      const projectDueDate = workflowSteps.find(step => step.title.toLowerCase().includes('final'))?.dueDate;
      if (projectDueDate) {
        const dueDate = new Date(projectDueDate);
        const dueDateString = formatDateForICS(dueDate);
        
        icsContent = icsContent.concat([
          'BEGIN:VEVENT',
          `UID:${calendarUid}-final@comiceditor.app`,
          `DTSTAMP:${stampString}`,
          `DTSTART:${dueDateString}`,
          `DTEND:${dueDateString}`,
          `SUMMARY:${projectTitle} - Final Deadline`,
          'DESCRIPTION:Project final deadline',
          'END:VEVENT'
        ]);
      }
      
      // End the calendar
      icsContent.push('END:VCALENDAR');
      
      // Create a blob from the ICS content
      const blob = new Blob([icsContent.join('\r\n')], { type: 'text/calendar;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      
      // Create a link element to trigger the download
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `${projectTitle.replace(/\s+/g, '_')}_Calendar.ics`);
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Calendar File Downloaded",
        description: "The schedule has been exported to an iCalendar file. You can import this into Google Calendar, Outlook, or other calendar apps.",
      });
    } catch (error) {
      console.error('Calendar generation error:', error);
      toast({
        title: "Calendar Export Failed",
        description: "There was an error generating the calendar file.",
        variant: "destructive"
      });
    }
  };
  
  // Helper function to format date for iCalendar
  const formatDateForICS = (date: Date) => {
    return date.toISOString().replace(/-|:|\.\d+/g, '').split('T').join('T');
  };

  return (
    <div className="flex space-x-2">
      <Button variant="outline" onClick={openEmailDialog}>
        <Mail className="mr-2 h-4 w-4" />
        Email Schedule
      </Button>
      
      <Button variant="outline" onClick={downloadPdf}>
        <Download className="mr-2 h-4 w-4" />
        Download PDF
      </Button>
      
      <Button variant="outline" onClick={downloadCalendar}>
        <Calendar className="mr-2 h-4 w-4" />
        Export to Calendar
      </Button>
      
      <Dialog open={emailDialogOpen} onOpenChange={setEmailDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Email Project Schedule</DialogTitle>
            <DialogDescription>
              Send the project schedule to collaborators or stakeholders
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <Tabs defaultValue="email" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="email">
                  <AtSign className="mr-2 h-4 w-4" />
                  Email Address
                </TabsTrigger>
                <TabsTrigger value="collaborator">
                  <User className="mr-2 h-4 w-4" />
                  Project Collaborator
                </TabsTrigger>
              </TabsList>
              
              <TabsContent value="email" className="pt-4">
                <div className="space-y-2">
                  <Label htmlFor="recipient">Recipient Email</Label>
                  <Input
                    id="recipient"
                    placeholder="email@example.com"
                    value={recipientEmail}
                    onChange={(e) => {
                      setRecipientEmail(e.target.value);
                      setSelectedCollaborator(null); // Clear collaborator selection
                    }}
                  />
                </div>
              </TabsContent>
              
              <TabsContent value="collaborator" className="pt-4">
                <div className="space-y-2">
                  <Label htmlFor="collaborator">Select Collaborator</Label>
                  <Select
                    value={selectedCollaborator?.toString() || ""}
                    onValueChange={(value) => {
                      const id = parseInt(value);
                      setSelectedCollaborator(id);
                      setRecipientEmail(""); // Clear manual email input
                    }}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a collaborator" />
                    </SelectTrigger>
                    <SelectContent>
                      {collaborators.map((collaborator) => (
                        <SelectItem 
                          key={collaborator.userId} 
                          value={collaborator.userId.toString()}
                        >
                          {collaborator.name || collaborator.fullName} - {collaborator.email || "No email"}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </TabsContent>
            </Tabs>
            
            <div className="space-y-2">
              <Label htmlFor="subject">Subject</Label>
              <Input
                id="subject"
                value={emailSubject}
                onChange={(e) => setEmailSubject(e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="message">Message (Optional)</Label>
              <Textarea
                id="message"
                placeholder="Add a personal message..."
                value={emailMessage}
                onChange={(e) => setEmailMessage(e.target.value)}
                rows={4}
              />
            </div>
          </div>
          
          <DialogFooter className="sm:justify-between">
            <Button
              type="button"
              variant="outline"
              onClick={() => setEmailDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button 
              type="button" 
              onClick={sendEmail}
              disabled={isSending}
            >
              <Send className="mr-2 h-4 w-4" />
              Open Email Client
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}