import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Mail, Download, Share, Send } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import axios from 'axios';

interface ExportButtonsProps {
  projectId: number;
  projectTitle: string;
  workflowSteps: any[]; // Replace with the proper WorkflowStep type
  collaborators: any[]; // Replace with the proper Collaborator type
}

export function ExportButtons({ projectId, projectTitle, workflowSteps, collaborators }: ExportButtonsProps) {
  const { toast } = useToast();
  const [emailDialogOpen, setEmailDialogOpen] = useState(false);
  const [recipientEmail, setRecipientEmail] = useState('');
  const [emailSubject, setEmailSubject] = useState(`Project Schedule: ${projectTitle}`);
  const [emailMessage, setEmailMessage] = useState('');
  const [isSending, setIsSending] = useState(false);

  // Function to download project schedule as PDF
  const downloadPdf = () => {
    try {
      const doc = new jsPDF();
      
      // Add title
      doc.setFontSize(18);
      doc.text(`Project Schedule: ${projectTitle}`, 14, 20);
      
      // Add date
      doc.setFontSize(12);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);
      
      // Set up workflow steps table
      const workflowHeaders = [['Step', 'Status', 'Assigned To', 'Due Date']];
      const workflowData = workflowSteps.map(step => [
        step.title,
        step.status,
        getAssigneeName(step.assignedTo),
        step.dueDate ? new Date(step.dueDate).toLocaleDateString() : 'Not set'
      ]);
      
      // Draw workflow steps table
      doc.setFontSize(14);
      doc.text('Workflow Steps', 14, 45);
      (doc as any).autoTable({
        startY: 50,
        head: workflowHeaders,
        body: workflowData,
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] }
      });
      
      // Set up talent assignments table
      const talentHeaders = [['Name', 'Role', 'Assigned Steps', 'Status']];
      const talentData = collaborators.map(collaborator => [
        collaborator.name || 'Not specified',
        collaborator.role,
        getAssignedStepsForTalent(collaborator.userId),
        collaborator.availability || 'Not specified'
      ]);
      
      // Draw talent assignments table
      doc.setFontSize(14);
      doc.text('Talent Assignments', 14, (doc as any).lastAutoTable.finalY + 20);
      (doc as any).autoTable({
        startY: (doc as any).lastAutoTable.finalY + 25,
        head: talentHeaders,
        body: talentData,
        theme: 'striped',
        headStyles: { fillColor: [66, 66, 66] }
      });
      
      // Add footer
      const pageCount = (doc as any).internal.getNumberOfPages();
      for(let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.text('Generated by Comic Book Editor', doc.internal.pageSize.width / 2, 285, { align: 'center' });
      }
      
      // Save the PDF
      doc.save(`${projectTitle.replace(/\s+/g, '_')}_Schedule.pdf`);
      
      toast({
        title: "PDF Downloaded",
        description: "The project schedule PDF has been downloaded.",
      });
    } catch (error) {
      console.error('PDF generation error:', error);
      toast({
        title: "PDF Generation Failed",
        description: "There was an error generating the PDF.",
        variant: "destructive"
      });
    }
  };
  
  // Function to send project schedule via email
  const sendEmail = async () => {
    if (!recipientEmail) {
      toast({
        title: "Missing Email",
        description: "Please enter a recipient email address.",
        variant: "destructive"
      });
      return;
    }
    
    setIsSending(true);
    
    try {
      // Generate HTML for email content
      const htmlContent = generateEmailHtml();
      
      const response = await axios.post('/api/email/send', {
        to: recipientEmail,
        subject: emailSubject,
        text: emailMessage,
        html: htmlContent,
        projectId
      });
      
      if (response.data.success) {
        toast({
          title: "Email Sent",
          description: `The project schedule was sent to ${recipientEmail}.`,
        });
        setEmailDialogOpen(false);
      } else {
        throw new Error(response.data.message || 'Failed to send email');
      }
    } catch (error) {
      console.error('Email sending error:', error);
      toast({
        title: "Email Failed",
        description: "There was an error sending the email. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsSending(false);
    }
  };
  
  // Helper function to get assignee name by ID
  const getAssigneeName = (assigneeId: number | undefined) => {
    if (!assigneeId) return 'Unassigned';
    const collaborator = collaborators.find(c => c.userId === assigneeId);
    return collaborator ? (collaborator.name || collaborator.fullName || 'Unknown') : 'Unknown';
  };
  
  // Helper function to get steps assigned to a talent
  const getAssignedStepsForTalent = (userId: number) => {
    const assignedSteps = workflowSteps.filter(step => step.assignedTo === userId);
    return assignedSteps.map(step => step.title).join(', ') || 'None';
  };
  
  // Generate HTML email content
  const generateEmailHtml = () => {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
        <h1 style="color: #333;">Project Schedule: ${projectTitle}</h1>
        <p>Generated on: ${new Date().toLocaleDateString()}</p>
        
        ${emailMessage ? `<div style="margin: 20px 0; padding: 15px; border-left: 4px solid #ccc;">${emailMessage}</div>` : ''}
        
        <h2 style="color: #444; margin-top: 30px;">Workflow Steps</h2>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #f2f2f2;">
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Step</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Status</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Assigned To</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Due Date</th>
            </tr>
          </thead>
          <tbody>
            ${workflowSteps.map(step => `
              <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">${step.title}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${step.status}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${getAssigneeName(step.assignedTo)}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${step.dueDate ? new Date(step.dueDate).toLocaleDateString() : 'Not set'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <h2 style="color: #444; margin-top: 30px;">Talent Assignments</h2>
        <table style="width: 100%; border-collapse: collapse;">
          <thead>
            <tr style="background-color: #f2f2f2;">
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Name</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Role</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Assigned Steps</th>
              <th style="padding: 10px; border: 1px solid #ddd; text-align: left;">Status</th>
            </tr>
          </thead>
          <tbody>
            ${collaborators.map(collaborator => `
              <tr>
                <td style="padding: 10px; border: 1px solid #ddd;">${collaborator.name || 'Not specified'}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${collaborator.role}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${getAssignedStepsForTalent(collaborator.userId)}</td>
                <td style="padding: 10px; border: 1px solid #ddd;">${collaborator.availability || 'Not specified'}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
        
        <p style="margin-top: 30px; color: #777; font-size: 12px;">
          This schedule was generated by Comic Book Editor.
        </p>
      </div>
    `;
  };

  return (
    <div className="flex space-x-2">
      <Button variant="outline" onClick={() => setEmailDialogOpen(true)}>
        <Mail className="mr-2 h-4 w-4" />
        Email Schedule
      </Button>
      
      <Button variant="outline" onClick={downloadPdf}>
        <Download className="mr-2 h-4 w-4" />
        Download PDF
      </Button>
      
      <Dialog open={emailDialogOpen} onOpenChange={setEmailDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Email Project Schedule</DialogTitle>
            <DialogDescription>
              Send the project schedule to collaborators or stakeholders
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="recipient">Recipient Email</Label>
              <Input
                id="recipient"
                placeholder="email@example.com"
                value={recipientEmail}
                onChange={(e) => setRecipientEmail(e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="subject">Subject</Label>
              <Input
                id="subject"
                value={emailSubject}
                onChange={(e) => setEmailSubject(e.target.value)}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="message">Message (Optional)</Label>
              <Textarea
                id="message"
                placeholder="Add a personal message..."
                value={emailMessage}
                onChange={(e) => setEmailMessage(e.target.value)}
                rows={4}
              />
            </div>
          </div>
          
          <DialogFooter className="sm:justify-between">
            <Button
              type="button"
              variant="outline"
              onClick={() => setEmailDialogOpen(false)}
            >
              Cancel
            </Button>
            <Button 
              type="button" 
              onClick={sendEmail}
              disabled={isSending}
            >
              {isSending ? (
                <>Sending...</>
              ) : (
                <>
                  <Send className="mr-2 h-4 w-4" />
                  Send Email
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}